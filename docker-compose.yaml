services:
  postgres:
    container_name: database
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ${POSTGRES_VOLUME}:/var/lib/postgresql/data

  nocodb:
    container_name: database-admin
    image: nocodb/nocodb:latest
    restart: always
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
    ports:
      - "8080:8080"
    volumes:
      - ${NOCODB_VOLUME}:/usr/app/data

  redis:
    container_name: service-cache
    image: redis:6.2-alpine
    restart: always
    command: ["redis-server"]
    ports:
      - "6379:6379"
    volumes:
      - ${REDIS_VOLUME:-cache_data}:/data

  traefik:
    container_name: reverse-proxy
    image: traefik:v3.3
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.defaultRule=Host(`{{ normalize .ContainerName }}.majdori.xyz`)"
      - "--entryPoints.http.address=:80"
      - "--entryPoints.http.http.redirections.entryPoint.to=https"
      - "--entryPoints.http.http.redirections.entryPoint.scheme=https"
      - "--entryPoints.https.address=:443"
      - "--entryPoints.https.http.tls.certResolver=letsencrypt"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entryPoint=http"
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${DATA_PATH}/letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.enable=true
      - traefik.http.services.traefik.loadbalancer.server.port=8080

  umami:
    container_name: analytics
    image: ghcr.io/umami-software/umami:postgresql-latest
    environment:
      DATABASE_URL: postgresql://${UMAMI_POSTGRESS_USER}:${UMAMI_POSTGRESS_PASSWORD}@umami_db:5432/${UMAMI_POSTGRESS_DB}
      DATABASE_TYPE: postgresql
      APP_SECRET: ${UMAMI_APP_SECRET}
    init: true
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - umami_db

  umami_db:
    container_name: analytics-db
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${UMAMI_POSTGRESS_DB}
      POSTGRES_USER: ${UMAMI_POSTGRESS_USER}
      POSTGRES_PASSWORD: ${UMAMI_POSTGRESS_PASSWORD}
    restart: always
    volumes:
      - ${UMAMI_DB_VOLUME:-umami_db_data}:/var/lib/postgresql/data

  minio:
    container_name: object-storage
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data
    ports:
      - "9000:9000"
      - "40411:40411"
    volumes:
      - minio_data:/data

  minio-init:
    container_name: object-storage-init
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      mc mb local/${MINIO_BUCKET} --ignore-existing;
      mc policy set public local/${MINIO_BUCKET};
      exit 0;
      "

volumes:
  cache_data:
  minio_data:
  umami_db_data:
  nocodb_data:
  postgres_data: