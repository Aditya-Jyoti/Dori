services:
  #################
  # REVERSE PROXY #
  #################
  traefik:
    container_name: reverse-proxy
    image: traefik:v3
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.defaultRule=Host(`{{ normalize .ContainerName }}.majdori.xyz`)"
      - "--entryPoints.http.address=:80"
      - "--entryPoints.http.http.redirections.entryPoint.to=https"
      - "--entryPoints.http.http.redirections.entryPoint.scheme=https"
      - "--entryPoints.https.address=:443"
      - "--entryPoints.https.http.tls.certResolver=letsencrypt"
      - "--entryPoints.https.http.tls.domains[0].main=majdori.xyz"
      - "--entryPoints.https.http.tls.domains[0].sans=*.majdori.xyz"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    environment:
      - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN:?}
    volumes:
      - ${DATA_PATH}/letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.enable=true
      - traefik.http.services.traefik.loadbalancer.server.port=8080
#   postgres:
#     container_name: database
#     image: postgres:15-alpine
#     environment:
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_DB: ${POSTGRES_DB}
#     volumes:
#       - ${POSTGRES_VOLUME}:/var/lib/postgresql/data

#   nocodb:
#     container_name: database-admin
#     image: nocodb/nocodb:latest
#     restart: always
#     depends_on:
#       - postgres
#     environment:
#       - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}
#     volumes:
#       - ${NOCODB_VOLUME}:/usr/app/data
#     labels:
#       - "traefik.enable=true"

#   redis:
#     container_name: service-cache
#     image: redis:6.2-alpine
#     restart: always
#     command: ["redis-server"]
#     volumes:
#       - ${REDIS_VOLUME:-cache_data}:/data

#   plausible_db:
#     container_name: plausible-db
#     image: postgres:16-alpine
#     restart: always
#     volumes:
#       - ${PLAUSIBLE_DB_VOLUME}:/var/lib/postgresql/data
#     environment:
#       POSTGRES_USER: ${PLAUSIBLE_DB_USER}
#       POSTGRES_PASSWORD: ${PLAUSIBLE_DB_PASSWORD}
#       POSTGRES_DB: ${PLAUSIBLE_DB}

#   plausible_events_db:
#     container_name: plausible-events-db
#     image: clickhouse/clickhouse-server:24.3.3.102-alpine
#     restart: always
#     volumes:
#       - ${CLICKHOUSE_DB:-event_data}:/var/lib/clickhouse
#       - ${CLICKHOUSE_LOGS:-event_logs}:/var/log/clickhouse-server
#       - ./clickhouse/logs.xml:/etc/clickhouse-server/config.d/logs.xml:ro
#       - ./clickhouse/ipv4-only.xml:/etc/clickhouse-server/config.d/ipv4-only.xml:ro
#     ulimits:
#       nofile:
#         soft: 262144
#         hard: 262144

#   plausible:
#     container_name: analytics
#     image: ghcr.io/plausible/community-edition:v2.1.4
#     restart: always
#     command: sh -c "/entrypoint.sh db createdb && /entrypoint.sh db migrate && /entrypoint.sh run"
#     volumes:
#       - ${PLAUSIBLE_VOLUME:-plausible-data}:/var/lib/plausible
#     ulimits:
#       nofile:
#         soft: 65535
#         hard: 65535
#     environment:
#       BASE_URL: ${PLAUSIBLE_BASE_URL}
#       SECRET_KEY_BASE: ${PLAUSIBLE_SECRET_KEY}
#       POSTGRES_USER: ${PLAUSIBLE_DB_USER}
#       POSTGRES_PASSWORD: ${PLAUSIBLE_DB_PASSWORD}
#       POSTGRES_DB: ${PLAUSIBLE_DB}
#       DATABASE_URL: "postgres://${PLAUSIBLE_DB_USER}:${PLAUSIBLE_DB_PASSWORD}@plausible-db:5432/${PLAUSIBLE_DB}"
#       CLICKHOUSE_DATABASE_URL: "http://plausible-events-db:8123/plausible_events_db"

#   minio:
#     container_name: object-storage
#     image: minio/minio:latest
#     environment:
#       MINIO_ROOT_USER: ${MINIO_ROOT_USER}
#       MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
#     command: server /data
#     volumes:
#       - minio_data:/data

#   minio-init:
#     container_name: object-storage-init
#     image: minio/mc
#     depends_on:
#       - minio
#     entrypoint: >
#       /bin/sh -c "
#       mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
#       mc mb local/${MINIO_BUCKET} --ignore-existing;
#       mc policy set public local/${MINIO_BUCKET};
#       exit 0;
#       "

# volumes:
#   cache_data:
#   minio_data:
#   umami_db_data:
#   nocodb_data:
#   postgres_data:
#   event_data:
#   event_logs:
